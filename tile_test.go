package himago

import (
	"bytes"
	"encoding/base64"
	"image"
	"testing"
)

var (
	// A base64 encoded version of the "No Image" image
	noImageBase64 = `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QIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQIjkABAiOQCESA4AIZIDQMi/BAAA///8NOAlP9sfxAAAAABJRU5ErkJggg==`

	// A base64 encoded 1x1 pixel PNG image
	imageBase64 = `iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAAAAAA6fptVAAAACklEQVQYV2P4DwABAQEAWk1v8QAAAABJRU5ErkJggg==`
)

// TestMD5Sum decodes the noImageBase64 image
// and does an md5.Sum(). It passes if the hex representation
// matches the known "No Image" hash.
func TestMD5Sum(t *testing.T) {
	decoded, _ := base64.StdEncoding.DecodeString(noImageBase64)

	r := bytes.NewReader(decoded)

	newImg, _, err := image.Decode(r)
	if err != nil {
		t.Error(err)
	}

	// Finally wrap the image.Image in a Tile and return it
	tile := Tile{newImg}

	if tile.md5Sum() != noImageMD5 {
		t.Errorf("Unexpected result of MD5Sum")
	}
}

// TestNoImageTrue creates a Tile from noImageBase64.
// It passes if the call to IsNoImage() returns true.
func TestNoImageTrue(t *testing.T) {
	decoded, _ := base64.StdEncoding.DecodeString(noImageBase64)

	r := bytes.NewReader(decoded)

	newImg, _, err := image.Decode(r)
	if err != nil {
		t.Error(err)
	}

	// Finally wrap the image.Image in a Tile and return it
	tile := Tile{newImg}

	// It should be identified as a "No Image". Fail if not.
	if !tile.IsNoImage() {
		t.Errorf("Failed to detect \"No Image\"")
	}
}

// TestNoImageFalse creates a Tile from imageBase64.
// It passes if the call to IsNoImage() returns false.
func TestNoImageFalse(t *testing.T) {
	decoded, _ := base64.StdEncoding.DecodeString(imageBase64)

	r := bytes.NewReader(decoded)

	newImg, _, err := image.Decode(r)
	if err != nil {
		t.Error(err)
	}

	// Finally wrap the image.Image in a Tile and return it
	tile := Tile{newImg}

	// It should NOT be identified as a "No Image". Fail if it is.
	if tile.IsNoImage() {
		t.Errorf("Incorrectly identified as a \"No Image\"")
	}
}
